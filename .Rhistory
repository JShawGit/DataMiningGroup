x<- NULL
x
x$cm <- 3
x
library(caret)
pred <- c(0.1,0.9,0.8,0.6,0.4)
act <- c(0,1,1,0,1)
confusionMatrix(pred,act)
rndd <- round(pred)
rndd
confusionMatrix(rndd,act)
confusionMatrix(as.factor(rndd),as.factor(act))
library(ROCR)
install.packages("ROCR")
source("~/Data Mining/DataMiningGroup/Evaluation.R", echo=TRUE)
prediction(pred, act)
rocpd <- prediction(pred, act)
perf <- performance(pred, "tpr", "fpr")
perf <- performance(rocpd, "tpr", "fpr")
plot(perf)
source("~/Data Mining/DataMiningGroup/Evaluation.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/Evaluation.R", echo=TRUE)
evaluation(pred,act)
source("~/Data Mining/DataMiningGroup/Evaluation.R", echo=TRUE)
evaluation(pred,act)
source("~/Data Mining/DataMiningGroup/Evaluation.R", echo=TRUE)
ev <- evaluation(pred,act)
plot(ev$pr)
source("~/Data Mining/DataMiningGroup/Evaluation.R", echo=TRUE)
ev <- evaluation(pred,act)
ev
source("~/Data Mining/DataMiningGroup/DecisionTree.r", echo=TRUE)
preds = Predict(tree,X_test,Y_test)
preds = Predict(tree,X_test)
preds
ev <- evaluation(preds,Y_test[,1])
ev
plot(ev$roc)
plot(ev$pr)
ev
source("~/Data Mining/DataMiningGroup/NaiveBayes.R", echo=TRUE)
results
source("~/Data Mining/DataMiningGroup/NaiveBayes.R", echo=TRUE)
results
ev <- evaluation(results, as.numeric(df$class))
as.numeric(df$class)
ev <- evaluation(results, as.numeric(df$class)-1)
ev
plot(ev$roc, main="Naive Bayes ROC Curve")
plot(ev$pr, main="Naive Bayes Precision-Recall Curve")
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
ev <- evaluation(results,(as.numeric(df$class)-1)
ev <- evaluation(results,as.numeric(df$class)-1)
ev
plot(ev$roc, main="Bayesian Network ROC Curve")
plot(ev$pr, main="Bayesian Network Precision-Recall Curve")
load('binarized_data.Rds')
age.cutoff <- mean(aggregate(df$Age,list(df$class),mean)$x)
df$Age <- as.numeric(df$Age > age.cutoff)
col_names <- names(df)
df[,col_names] <- lapply(df[,col_names] , factor)
df
head(df)
?extractCPT
library(gRain)
dependencies <- ~Age + Gender + class*Age*Gender +
Genital.thrush*Gender*class +
Polyuria*class +
Polydipsia*class +
sudden.weight.loss*Polyuria*class +
weakness*class +
Polyphagia*class +
visual.blurring*class +
Itching*class +
Irritability*class +
delayed.healing*weakness*Itching*class + #*Polyphagia +
partial.paresis*class +
muscle.stiffness*Age*visual.blurring*class +
Alopecia*Gender*delayed.healing*class +
Obesity*sudden.weight.loss*class
graph <- dag(dependencies)
cond.prob.tabs <- extractCPT(df, graph,smooth = 1)
cond.prob.tabs
for(i in 1:length(cond.prob.tabs)){
cond.prob.tabs[[i]] <- as.data.frame(cond.prob.tabs[[i]])
}
cond.prob.tabs
[item for item in 1:3]
library(data.table)
0:1
CJ(0:1,0:1)
CJ(0:1,0:1,0:1)
CJ(0:1,0:1,0:1,0:1)
CJ(0:1,0:1,0:1,0:1)[,order(decreasing = TRUE)]
CJ(0:1,0:1,0:1,0:1)[,order(colnames(CJ(0:1,0:1,0:1,0:1)),decreasing = TRUE)]
CJ(0:1,0:1,0:1,0:1))
colnames(CJ(0:1,0:1,0:1,0:1))
order(colnames(CJ(0:1,0:1,0:1,0:1)),decreasing = TRUE)
CJ(0:1,0:1,0:1,0:1)[1,1]
CJ(0:1,0:1,0:1,0:1)[,c(4,3,2,1)]
4:1
CJ(0:1,0:1,0:1,0:1)[,4:1]
c(CJ(0:1,0:1,0:1,0:1)[,4:1], integer(16))
CJ(0,0:1,0:1,0:1,0:1)[,5:1]
cond.prob.tabs
result <- NULL
result$Age <- CJ(0,0:1)[,2:1]
colnames(result$Age) <- c("Age","Freq")
result$Age
df
result$Age[,Freq := mapply(sum(df$Age==Age),Age)]
result$Age[,Freq := mapply((function (Age) sum(df$Age==Age)),Age)]
result$Age
result$Age[,Freq := mapply((function (Age) sum(df$Age==Age)/dim(df)[1]),Age)]
result$Age
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age","Freq")
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age
result$Age[,Freq := mapply((function (Age) sum(df$Age==Age)/dim(df)[1]),Age)]
result$Age
smooth <- 1
result$Age[,Freq := mapply((function (Age) (sum(df$Age==Age)+smooth)/dim(df)[1]),Age)]
result$Age
graph <- dag(dependencies)
cond.prob.tabs <- extractCPT(df, graph,smooth = 1)
for(i in 1:length(cond.prob.tabs)){
cond.prob.tabs[[i]] <- as.data.frame(cond.prob.tabs[[i]])
}
# for(i in 3:length(cond.prob.tabs)){
#   cond.prob.tabs[[i]] <- as.data.frame(ftable(cond.prob.tabs[[i]],row.vars = 1:length(dimnames(cond.prob.tabs[[i]]))))
# }
#subset(cond.prob.tabs$delayed.healing, (delayed.healing == 0 & class == 1 & weakness == 0 & Itching == 1 & Age == 1))$Freq
predict <- function(tuple){
tuple$class <- 0
zero.joint.prob <- 1
for(colname in colnames(df)){
tab.names <- colnames(cond.prob.tabs[[colname]])[1:length(colnames(cond.prob.tabs[[colname]]))-1]
filtered.tup <- tuple[,tab.names]
cond.prob <- cond.prob.tabs[[colname]][row.match(filtered.tup, cond.prob.tabs[[colname]][1:ncol(cond.prob.tabs[[colname]])-1]),ncol(cond.prob.tabs[[colname]])]
zero.joint.prob <- zero.joint.prob * cond.prob
#print(paste0("ZJP:",zero.joint.prob))
}
tuple$class <- 1
one.joint.prob <- 1
for(colname in colnames(df)){
tab.names <- colnames(cond.prob.tabs[[colname]])[1:length(colnames(cond.prob.tabs[[colname]]))-1]
filtered.tup <- tuple[,tab.names]
cond.prob <- cond.prob.tabs[[colname]][row.match(filtered.tup, cond.prob.tabs[[colname]][1:ncol(cond.prob.tabs[[colname]])-1]),ncol(cond.prob.tabs[[colname]])]
one.joint.prob <- one.joint.prob * cond.prob
#print(paste0("OJP:",one.joint.prob))
}
round(one.joint.prob/(one.joint.prob+zero.joint.prob))
#one.joint.prob/(one.joint.prob+zero.joint.prob)
}
#predict(df[5,])
results <- integer(520)
# for(i in 1:520){
#   results[i] <- predict(df[i,])
# }
fold1 <- df[1:173,]
fold2 <- df[174:(174+173),]
fold3 <- df[(174+173):520,]
cond.prob.tabs <- extractCPT(rbind(fold2,fold3), graph, smooth = 1)
for(i in 1:length(cond.prob.tabs)){
cond.prob.tabs[[i]] <- as.data.frame(cond.prob.tabs[[i]])
}
for(i in 1:173){
results[i] <- predict(fold1[i,])
}
cond.prob.tabs <- extractCPT(rbind(fold1,fold3), graph, smooth = 1)
for(i in 1:length(cond.prob.tabs)){
cond.prob.tabs[[i]] <- as.data.frame(cond.prob.tabs[[i]])
}
for(i in 1:173){
results[i+173] <- predict(fold2[i,])
}
cond.prob.tabs <- extractCPT(rbind(fold1,fold2), graph, smooth = 1)
for(i in 1:length(cond.prob.tabs)){
cond.prob.tabs[[i]] <- as.data.frame(cond.prob.tabs[[i]])
}
for(i in 1:174){
results[i+173+173] <- predict(fold3[i,])
}
print("Accuracy:")
(520-sum(abs(results - (as.numeric(df$class)-1))))/520
df
dim(df)
gen.tabs(df)
gen.tabs(df,1)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
gen.tabs(df,1)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
gen.tabs(df,1)
dat <- df
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)]
result
gen.tabs(df,1)
tst <- gen.tabs(df,1)
tst$Age
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
gen.tabs(df)
result <- gen.tabs(df)
result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)]
result
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
dim(df)
dat <- df
smooth <- 1
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)]
result
gen.tabs(dat)
gen.tabs <- function(dat,smooth=1){
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)]
result$Age
}
gen.tabs(dat)
gen.tabs <- function(dat,smooth=1){
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age"
result$Age
}
gen.tabs <- function(dat,smooth=1){
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age
}
gen.tabs <- function(dat,smooth=1){
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
#result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)]
result$Age
}
gen.tabs(dat)
gen.tabs(dat)['Age']
gen.tabs(dat)[,'Age']
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age[,'Freq'] <- mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)
result$Age
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)+smooth*dim(result$Age)[1])),Age)]
result$Age
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)]
result$Age
gen.tabs <- function(dat,smooth=1){
result <- NULL
result$Age <- CJ(0:1)[,1]
colnames(result$Age) <- c("Age")
result$Age[,Freq := mapply((function (Age) (sum(dat$Age==Age)+smooth)/(dim(dat)[1]+smooth*dim(result$Age)[1])),Age)]
result
}
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
gen.tabs(df)
debugSource("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
debugSource("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
result
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
gen.tabs(df)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
tabs
tabs$Age[,'Age']
tabs$Age[,'Freq']
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
tabs$Gender
cond.prob.tabs <- extractCPT(df, graph,smooth = 1)
for(i in 1:length(cond.prob.tabs)){
cond.prob.tabs[[i]] <- as.data.frame(cond.prob.tabs[[i]])
}
cond.prob.tabs$Age
typeof(cond.prob.tabs$Age)
list(tabs$Age)
typeof(tabs$Age)
tabs$Age
tabs$Gender
cond.prob.tabs$Gender
cond.prob.tabs$class
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$class
tabs$class
tabs$class
cond.prob.tabs$Gender
tabs$Gender
0.3697318+0.6302682
cond.prob.tabs <- extractCPT(df, graph,smooth = 1)
for(i in 1:length(cond.prob.tabs)){
cond.prob.tabs[[i]] <- as.data.frame(cond.prob.tabs[[i]])
}
cond.prob.tabs$Gender
tabs$Gender
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$class
tabs$class
tabs$class
cond.prob.tabs$Genital.thrush
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Genital.thrush
tabs$Genital.thrush
tabs$Genital.thrush
cond.prob.tabs$Polyuria
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Polyuria
tabs$Polyuria
tabs$Polyuria
cond.prob.tabs$Polydipsia
tabs$Polydipsia
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Polydipsia
tabs$Polydipsia
tabs$Polydipsia
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$sudden.weight.loss
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$sudden.weight.loss
tabs$sudden.weight.loss
tabs$sudden.weight.loss
cond.prob.tabs$weakness
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$weakness
tabs$weakness
tabs$weakness
cond.prob.tabs$Polyphagia
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Polyphagia
tabs$Polyphagia
tabs$Polyphagia
cond.prob.tabs$visual.blurring
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$visual.blurring
tabs$visual.blurring
tabs$visual.blurring
cond.prob.tabs$Itching
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Itching
tabs$Itching
tabs$Itching
cond.prob.tabs$Irritability
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Irritability
tabs$Irritability
tabs$Irritability
cond.prob.tabs$delayed.healing
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$delayed.healing
tabs$delayed.healing
tabs$delayed.healing
cond.prob.tabs$partial.paresis
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$partial.paresis
tabs$partial.paresis
tabs$partial.paresis
cond.prob.tabs$muscle.stiffness
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$muscle.stiffness
tabs$muscle.stiffness
tabs$muscle.stiffness
cond.prob.tabs$Alopecia
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Alopecia
tabs$Alopecia
tabs$Alopecia
cond.prob.tabs$Obesity
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
cond.prob.tabs$Obesity
tabs$Obesity
tabs$Obesity
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/NaiveBayes.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/NaiveBayes.R", echo=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/BayesianNetwork.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/NaiveBayes.R", echo=TRUE)
source("~/Data Mining/DataMiningGroup/NaiveBayes.R", echo=TRUE)
